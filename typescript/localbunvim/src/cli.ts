import apiInfo from "./apiInfo.json";

function toTypescriptType(type: string | undefined) {
    const typesMap: Record<string, string> = {
        Array: "any[]",
        "ArrayOf(Buffer)": "number[]",
        "ArrayOf(Dictionary)": "Record<string, any>[]",
        "ArrayOf(Integer)": "number[]",
        "ArrayOf(Integer, 2)": "[number, number]",
        "ArrayOf(String)": "string[]",
        "ArrayOf(Tabpage)": "number[]",
        "ArrayOf(Window)": "number[]",
        Boolean: "boolean",
        Buffer: "number",
        Dictionary: "Record<string, any>",
        Float: "number",
        Integer: "number",
        LuaRef: "any",
        Object: "any",
        String: "string",
        Tabpage: "number",
        void: "void",
        Window: "number",
    };
    const typescriptType = type && typesMap[type];
    if (!typescriptType) throw Error(`typescriptType for type:${type} could not be termined`);
    return typescriptType;
}

let output = `/*
* file generated by bunvim: https://github.com/gualcasas/bunvim
*/

export type NeovimApiInfo = {\n`;

apiInfo.functions
    .filter((fn) => fn.deprecated_since === undefined)
    .forEach((fun) => {
        // console.log(fun.name);
        // console.log(fun.parameters);

        output += `    ${fun.name}: {
${
    fun.parameters.length
        ? `        parameters: [${fun.parameters
              .map((param) => `${param[1]}: ${toTypescriptType(param[0])}`)
              .join(", ")}]`
        : ""
};
        returns: ${toTypescriptType(fun.return_type)};
    };
`;
    });

output += "\n}";

await Bun.write("./neovim-api-info.ts", output);
